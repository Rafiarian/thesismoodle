{{!
    This file is part of Moodle - http://moodle.org/

    Moodle is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Moodle is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
}}
{{!
    @template local_edulog/cpmk_result_3


    Example context (json):
    {
    
    }
}}

<style>
.edulog-wrapper {
  max-width: 100%;
  margin: 0 auto;
  padding: 20px;
}

.edulog-header .back-button {
  text-decoration: none;
  font-size: 20px;
  color: #000;
}

.edulog-course-title h2 {
  margin-bottom: 0;
}

.edulog-course-title h5 {
  margin-top: 4px;
  color: #555;
}

.table td, .table th {
  vertical-align: middle !important;
}

a {
  text-decoration: underline;
}
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="edulog-wrapper container mt-2">
  <div class="edulog-header d-flex justify-content-between align-items-center mb-2">
    <div class="d-flex align-items-center">
      <a href="index.php" class="btn me-3">&larr;</a>
      <select id="sortSelect" class="form-select form-select-sm flex-grow-1" onchange="onSortChange(this)">
        <option value="time" {{#is_time}}{{/is_time}}>Modules Accessing Time</option>
        <option value="most" {{#is_most}}{{/is_most}}>Most Visits</option>
        <option value="least" {{#is_least}}{{/is_least}}>Least Visits</option>
        <option value="notaccess" {{#is_notaccess}}{{/is_notaccess}}>Not Accessing Modules</option>
        <option value="sword" {{#is_sword}}{{/is_sword}}>SWORD</option>
        
      </select>
    </div>
    <div class="text-end">
      <h3 class="fw-bold mb-0"><strong>Course</strong></h3>
      <h5 class="text-muted">{{course_fullname_graph}} - {{cpmk_name_graph}}</h5>
    </div>
  </div>
</div>

<h3 class="mt-4 mb-3 fw-semibold border-top pt-3">Learning Modules Activity Chart</h3>

<div id="chart_div"></div>

<div class="container mt-4">
    <canvas id="myChart" width="400" height="200"></canvas>
</div>

<script>
    // --- Kunci Penting! Pastikan labels dan counts di-encode sebagai JSON ---
    const labels = {{{ labels }}};
    const counts = {{{counts }}};

    const labelsPerDay = labels;
    const countsPerDay = counts;

    // Function to group counts by week
    function groupByWeek(labels, counts) {
        const weekData = {};

        labels.forEach((date, index) => {
            const week = getWeekNumber(date); // Example: Week 15, 16, etc
            if (!weekData[week]) {
                weekData[week] = 0;
            }
            weekData[week] += counts[index];
        });

        const groupedLabels = [];
        const groupedCounts = [];

        for (const week in weekData) {
            groupedLabels.push('Week ' + week);
            groupedCounts.push(weekData[week]);
        }

        return { labels: groupedLabels, counts: groupedCounts };
    }

    // Helper to get week number from a date string
    function getWeekNumber(dateString) {
        const date = new Date(dateString);
        const firstJan = new Date(date.getFullYear(), 0, 1);
        const days = Math.floor((date - firstJan) / (24 * 60 * 60 * 1000));
        return Math.ceil((days + firstJan.getDay() + 1) / 7);
    }

    // Create initial chart
    const ctx = document.getElementById('myChart').getContext('2d');

    const chart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labelsPerDay,
            datasets: [{
                label: 'Activity Count',
                data: countsPerDay,
                backgroundColor: 'rgba(54, 162, 235, 0.5)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }
            }
        }
    });

    // Toggle between daily and weekly
    let currentView = 'day';

    document.getElementById('toggleView').addEventListener('click', function() {
        if (currentView === 'day') {
            const weeklyData = groupByWeek(labelsPerDay, countsPerDay);
            chart.data.labels = weeklyData.labels;
            chart.data.datasets[0].data = weeklyData.counts;
            this.textContent = 'Switch to Daily View';
            currentView = 'week';
        } else {
            chart.data.labels = labelsPerDay;
            chart.data.datasets[0].data = countsPerDay;
            this.textContent = 'Switch to Weekly View';
            currentView = 'day';
        }
        chart.update();
    });
</script>


<script>
function onSortChange(select) {
  const selectedValue = select.value;
  const params = new URLSearchParams(window.location.search);
  params.set('sort', selectedValue);
  window.location.href = window.location.pathname + '?' + params.toString();
}
</script>